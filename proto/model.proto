syntax = "proto3";

import "github.com/golang/protobuf/ptypes/timestamp/timestamp.proto";

package model;

option go_package = "github.com/axsh/openvdc/model";

message Instance {
  string id = 1;
  string slave_id = 2 [json_name="slave_id"];
  //string resource_id = 3; // Obsolete
  InstanceState last_state = 4 [json_name="last_state"];
  google.protobuf.Timestamp created_at = 5 [json_name="created_at"];
  Template template = 6;
  FailureMessage latest_failure = 7;
}

message InstanceState {
  enum State {
    REGISTERED = 0;
    QUEUED = 1;
    STARTING = 2;
    RUNNING = 3;
    STOPPING = 4;
    STOPPED = 5;
    REBOOTING = 6;
    SHUTTINGDOWN = 7;
    TERMINATED = 8; // Terminal
    FAILED = 9; // Terminal
  }
  State state = 1;
  google.protobuf.Timestamp created_at = 2 [json_name="created_at"];
}

message FailureMessage {
  enum ErrorType {
    FAILED_BOOT = 0;
    FAILED_START = 1;
    FAILED_STOP = 2;
    FAILED_REBOOT = 3;
    FAILED_TERMINATE = 4;
  }
  ErrorType error_type = 1;
  google.protobuf.Timestamp failed_at = 2;
}

message Template {
  string template_uri = 1 [json_name="template_uri"];
  oneof Item {
    NoneTemplate none = 500;
    LxcTemplate lxc = 501;
    NullTemplate null = 502;
    QemuTemplate qemu = 503;
  }
  google.protobuf.Timestamp created_at = 2 [json_name="created_at"];
}

message NoneTemplate {}

message LxcTemplate {
  int32 vcpu = 1;
  int32 memory_gb = 2 [json_name="memory_gb"];
  int32 min_vcpu = 3 [json_name="min_vcpu"];
  int32 min_memory_gb = 4 [json_name="min_memory_gb"];
  message Image {
    string download_url = 1 [json_name="download_url"];
    string chksum_type = 2 [json_name="chksum_type"];
    string chksum = 3;
  }
  Image lxc_image = 5 [json_name="lxc_image"];
  message Interface {
    string type = 1;
    string macaddr = 2;
    string ipv4addr = 3;
    //string bridge = 4; // Obsolete
  }
  repeated Interface interfaces = 6;
  message Template {
    // Template specifies the name of the template.
    string template = 1;

    // Backend specifies the type of the backend.
    int32 backend = 2;

    // Distro specifies the name of the distribution.
    string distro = 3;

    // Release specifies the name/version of the distribution.
    string release = 4;

    // Arch specified the architecture of the container.
    string arch = 5;

    // Variant specifies the variant of the image (default: "default").
    string variant = 6;

    // Image server (default: "images.linuxcontainers.org").
    string server = 7;

    // GPG keyid (default: 0x...).
    string key_id = 8 [json_name="key_id"];

    // GPG keyserver to use.
    string key_server = 9 [json_name="key_server"];

    // Disable GPG validation (not recommended).
    bool disable_gpg_validation = 10 [json_name="disable_gpg_validation"];

    // Flush the local copy (if present).
    bool flush_cache = 11 [json_name="flush_cache"];

    // Force the use of the local copy even if expired.
    bool force_cache = 12 [json_name="force_cache"];

    // ExtraArgs provides a way to specify template specific args.
    repeated string extra_args = 13 [json_name="extra_args"] ;
  }
  Template lxc_template = 7 [json_name="lxc_template"];
  repeated string node_groups = 8 [json_name="node_groups"];
}

message QemuTemplate {
  int32 vcpu = 1;
  int32 memory_gb = 2 [json_name="memory_gb"];
  int32 min_vcpu = 3 [json_name="min_vcpu"];
  int32 min_memory_gb = 4 [json_name="min_memory_gb"];
  message Image {
    string download_url = 1 [json_name="download_url"];
    string chksum_type = 2 [json_name="chksum_type"];
    string chksum = 3;
    enum Format {
      RAW = 0;
      QCOW2 = 1;
    }
    Format format = 4 [json_name="format"];
  }
  Image qemu_image = 5 [json_name="qemu_image"];
  message Interface {
    string type = 1;
    string macaddr = 2;
    string ipv4addr = 3;
    //string bridge = 4; // Obsolete
  }
  bool use_kvm = 6 [json_name="use_kvm"];
  repeated Interface interfaces = 7;
  repeated string node_groups = 8 [json_name="node_groups"];
}

message NullTemplate {
  int32 vcpu = 1;
  int32 memory_gb = 2 [json_name="memory_gb"];
  enum CrashStage {
    NONE  = 0;
    START = 1;
    STOP  = 2;
    CREATE = 3;
    DESTROY = 4;
    REBOOT = 5;
  }
  CrashStage crash_stage = 3 [json_name="crash_stage"];
  repeated string node_groups = 4 [json_name="node_groups"];
}
