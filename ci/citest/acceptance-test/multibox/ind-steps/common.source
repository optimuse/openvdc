#!/bin/bash
. "${ENV_ROOTDIR}/external_libraries/bashsteps/simple-defaults-for-bashsteps.source"

function create_bridge() {
  local name="$1"
  local ip_addr="$2"

  (
    $starting_step "Create bridge ${name}"
    ip link show dev "${name}" > /dev/null
    $skip_step_if_already_done ; set -xe
    sudo ip link add name "${name}" type bridge
    sudo ip link set "${name}" up

    if [[ -n "${ip_addr}" ]]; then
      sudo ip addr add "${ip_addr}" dev "${name}"
    fi
  ) ; prev_cmd_failed
}

function check_dep() {
  local dep="$1"

  command -v "${dep}" >/dev/null 2>&1
  if [[ "$?" != "0" ]]; then
    echo "Missing dependency: ${dep}"
    exit 1
  fi
}

function download_seed_image () {
    local box="${1}"

    (
        $starting_step "Download ${box}"
        [ -f "${BOXES_DIR}/${box}" ]
        $skip_step_if_already_done; set -xe
        mkdir -p "${BOXES_DIR}"
        curl -o "${BOXES_DIR}/${box}" "https://ci.openvdc.org/img/${box}"
    ) ; prev_cmd_failed
}

function masquerade() {
  local subnet="${1}"

  (
    $starting_step "Masquerade for subnet ${subnet}"
    sudo iptables-save | grep -wq "\-A POSTROUTING \-s ${subnet} \-j MASQUERADE"
    $skip_step_if_already_done
    sudo iptables -t nat -A POSTROUTING -s "${subnet}" -j MASQUERADE
  ) ; prev_cmd_failed
}

function stop_masquerade() {
  local subnet="${1}"

  (
    $starting_step "Stop masquerading for subnet ${subnet}"
    sudo iptables-save | grep -wq "\-A POSTROUTING \-s ${subnet} \-j MASQUERADE"
    [ "$?" != "0" ]
    $skip_step_if_already_done; set +e
    sudo iptables -t nat -D POSTROUTING -s "${subnet}" -j MASQUERADE
  ) # ; prev_cmd_failed ### TODO: bashstep missing feature (axsh/openvdc#77)
}

function run_steps () {
    local step="${1}" stage="${2}"
    local step_common="${ENV_ROOTDIR}/ind-steps/step-${step}/common.source"
    (
        [[ -f "${step_common}" ]] && . "${step_common}"
        . "${ENV_ROOTDIR}/ind-steps/step-${step}/${stage}.sh"
    )
}

function build () {
    local steps="${@}"

    local stages=(
        $(
            $(sudo kill -0 $(sudo cat ${NODE_DIR}/${vm_name}.pid 2> /dev/null) 2> /dev/null) && { echo "postconfigure provide" ; return ; }
            $(sudo [ -f "${CACHE_DIR}/${BRANCH}/${vm_name}.qcow2" ]) && { echo "boot postconfigure provide" ; return ; }
            echo "init rsync install preconfigure boot postconfigure provide"
        )
    )

    # We first run init.sh for every step after which we run install.sh for every
    # step and so on. This is because some stages will need to happen before booting
    # the VM while others need to happen after boot.
    for stage in ${stages[@]} ; do
        for step in ${steps[@]} ; do
            [[ -d "${ENV_ROOTDIR}/ind-steps/step-${step}" ]] || continue

            # Continue if the stage isn't defined so that we don't get a non-zero exit status
            # Using if instead of the above oneliner notation because the above will also call
            # continue if the run_steps function fails which is not what we want.
            if [[ -f "${ENV_ROOTDIR}/ind-steps/step-${step}/${stage}.sh" ]]; then
              run_steps "${step}" "${stage}";
            else
              continue
            fi

            [[ $? == 255 ]] && { . "${ENV_ROOTDIR}/ind-steps/step-box/common.source" ; umount-seed-image ; exit 255 ; }
        done
    done
}

function disable_service () {
    local service="${1}"

    (
        $starting_step "Disable service: ${service}"
        run_ssh root@${IP_ADDR} "systemctl status ${service} | grep -q running"
        [[ $? == 1 ]]
        $skip_step_if_already_done ; set -ex
        run_ssh root@${IP_ADDR} "systemctl disable ${service}"
        run_ssh root@${IP_ADDR} "systemctl stop ${service}"
    ) ; prev_cmd_failed
}

function run_ssh() {
    local key="${NODE_DIR}/sshkey"
    [[ -f ${key} ]] &&
        $(type -P ssh) -i "${key}" -o 'StrictHostKeyChecking=no' -o 'LogLevel=quiet' -o 'UserKnownHostsFile /dev/null' "${@}"
}

function destroy_bridge() {
  local name="$1"

  (
    $starting_step "Destroy bridge ${name}"
    ip link show dev "${name}" > /dev/null
    [ "$?" != "0" ]
    $skip_step_if_already_done ; set -x +e
    # Ignore errors for complete teardown.
    sudo ip link set "${name}" down
    sudo ip link delete dev "${name}"
  ) # ; prev_cmd_failed ### TODO: bashstep missing feature (axsh/openvdc#77)
}

function require_branch_variable() {
  if [[ -z "${BRANCH}" ]] ; then
     echo "the BRANCH variable needs to be set with the github branch to test."
     exit 1
  fi
}

function require_rebuild_variable() {
  if [[ -z "${REBUILD}" ]] ; then
     echo "The REBUILD variable needs to be set. 'true' if you wish to rebuild the environment completely. 'false' otherwise"
     exit 1
  fi
}

function require_release_suffix {
  if [[ -z "${RELEASE_SUFFIX}" ]] ; then
     echo "the RELEASE_SUFFIX variable needs to be set with the release suffix in the yum repo we're testing. Usually looks similar to: '20170111063228git2d0dc08'."
     exit 1
  fi
}

function install_openvdc_yum_repo() {
  (
    $starting_step "Install OpenVDC yum repository"
    false # Just overwrite it if it exists.
    $skip_step_if_already_done
    run_ssh root@${IP_ADDR} "cat > /etc/yum.repos.d/openvdc.repo" << EOS
[openvdc]
name=OpenVDC
failovermethod=priority
baseurl=${YUM_REPO_URL}
enabled=1
gpgcheck=0
EOS
  ) ; prev_cmd_failed
}

function install_yum_package() {
  local package="$1"

  (
      $starting_step "Install ${package} on ${vm_name}"
      sudo chroot ${TMP_ROOT} /bin/bash -c "rpm -q ${package} 2> /dev/null"
      $skip_step_if_already_done; set -ex
      sudo chroot ${TMP_ROOT} /bin/bash -c "yum install -y ${package}"
  ) ; prev_cmd_failed
}

function install_yum_package_over_ssh() {
  local package="$1"

  (
    $starting_step "Install package (over SSH): ${package}"
    # No need to make an extra ssh connection to check if it's installed already
    # Yum will notice and just not do anything.
    false
    $skip_step_if_already_done; set -xe
    run_ssh root@${IP_ADDR} "yum install -y ${package}"
  ) ; prev_cmd_failed
}

function disable_service() {
  local service="$1"

  (
      $starting_step "Disable $1"
      sudo chroot "${TMP_ROOT}" /bin/bash -c "systemctl is-enabled $1"
      [[ ! $? -eq 0 ]]
      $skip_step_if_already_done; set -xe
      sudo chroot "${TMP_ROOT}" /bin/bash -c "systemctl disable $1"
  ) ; prev_cmd_failed
}

function enable_service_over_ssh() {
  local service="$1"

  (
    $starting_step "Enable service (over SSH): ${service}"
    # No need to make an extra ssh connection to check if it's enabled already
    # systemctl will just not do anything
    false
    $skip_step_if_already_done; set -xe
    run_ssh root@${IP_ADDR} "systemctl start ${service}"
    run_ssh root@${IP_ADDR} "systemctl enable ${service}"
  ) ; prev_cmd_failed
}
