// Code generated by go-bindata.
// sources:
// ../schema/none.json
// ../schema/v1.json
// ../schema/vm/lxc.json
// ../schema/vm/null.json
// ../schema/vm/qemu.json
// DO NOT EDIT!

package registry

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaNoneJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x8e\xb1\x4e\xc3\x30\x10\x86\xf7\x3c\xc5\xc9\x30\x80\xd4\x12\x40\x4c\x59\x41\xac\x48\x08\xb1\xa0\x0a\x19\xe7\x68\x5d\xd5\x77\xe6\x7c\x19\xaa\xaa\xef\x8e\x1d\x43\x14\x26\x3a\x44\xca\x7d\xf7\xfd\xf7\xfb\xd0\x00\x98\xf3\xe4\x36\x18\xac\xe9\xc0\x6c\x54\x63\xd7\xb6\xdb\xc4\xb4\xac\xf4\x8a\x65\xdd\xf6\x62\x3f\x75\x79\x7d\xd7\x56\x76\x66\x16\x25\xd7\x63\x72\xe2\xa3\x7a\xa6\x92\x7d\x8a\x48\xaf\x0f\xf7\xf0\x8c\x89\x07\x71\x08\x2f\x18\xe2\xce\x2a\x76\x40\x4c\x08\x17\x8f\x2c\xa0\x98\xd4\xd3\x1a\x98\x76\xfb\xcb\x7a\x46\xf7\x11\x4b\x9e\x3f\xb6\xe8\xb4\x32\xc1\xaf\xc1\x0b\xf6\x99\xbf\xe5\xf9\xd7\xca\xbf\xab\x71\x1f\x85\x23\x8a\x7a\x4c\xd9\x38\x54\xe3\xdd\x71\x08\x48\x3a\x91\xd9\xed\xa4\x92\x5b\xcd\x88\x8f\x8b\x66\xbe\x9b\x5c\xa4\x21\x4c\x7d\x23\x29\xcf\x36\x3f\xe3\xea\x4f\x36\x5a\xb1\xe1\xe6\xd4\xa6\xd1\xbe\xfd\xd7\x6e\xca\x77\x6c\xbe\x03\x00\x00\xff\xff\x57\x3a\x39\x38\x94\x01\x00\x00")

func schemaNoneJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaNoneJson,
		"schema/none.json",
	)
}

func schemaNoneJson() (*asset, error) {
	bytes, err := schemaNoneJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/none.json", size: 404, mode: os.FileMode(420), modTime: time.Unix(1496230900, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaV1Json = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x91\xcd\x4e\xc3\x30\x10\x84\xef\x79\x0a\xcb\x70\x6c\x63\x90\x38\xf5\x0a\xf7\x4a\x80\xb8\xa0\x0a\xb9\xce\xb6\x71\x15\xff\x74\xbd\x2e\x45\x55\xde\x1d\x3b\x49\xa3\x20\x90\xa8\x9a\x93\x77\x3c\xdf\x6c\x46\x3e\x15\x8c\x71\x5d\xf1\x05\xe3\x35\x91\x0f\x0b\x21\x50\x7e\x96\x5b\x4d\x75\x5c\xc7\x00\xa8\x9c\x25\xb0\x54\x2a\x67\x84\x3c\x86\x5a\x38\x0f\xf6\x50\x29\x61\x64\x20\x40\x11\x54\x0d\x46\x8a\xc3\x7d\xb9\x0b\xce\xde\xf0\x59\x0e\xbc\xed\xd5\x73\x6a\x0a\xcd\x97\xf3\x5e\x2d\x1d\x6e\x45\x85\x72\x43\xf3\xbb\x87\x81\x1f\xb8\x0a\x82\x42\xed\x49\x3b\x9b\xd9\x65\x5a\xf5\xf6\xf4\xc8\x9e\x21\xb8\x88\x0a\xd8\x2b\x18\xdf\x48\x02\xf6\xd2\xe7\x77\x10\x7d\x79\xc8\x6e\xb7\xde\x81\xa2\x5e\x43\xd8\x47\x8d\x90\x7b\xbd\xa7\x39\xbb\x34\x35\xd0\x5d\xe6\x61\xc8\xe1\x69\x5c\x75\x80\xc7\xd4\x0b\x49\x43\x48\xc8\xa9\x77\x7d\xa4\xce\x26\x75\x1f\x95\xc9\xb2\x40\xa8\xed\x96\x77\x72\x3b\x9b\xae\xb8\xd0\xfc\xb3\xea\x65\xf9\xe7\xbf\xfe\xc3\x3f\x29\xdf\xe9\xce\xc2\x72\x33\xb6\xcf\xdf\x69\x3c\xe5\x07\x42\xc8\xb7\xbc\x14\x36\x39\x87\xa7\x1b\x0d\xed\xec\x3f\xea\x60\x44\x73\x54\x57\x71\x36\x36\xcd\x55\xe0\x1e\x4c\xfc\x05\x0e\xa7\x55\x71\x9e\xda\xa2\x2d\xbe\x03\x00\x00\xff\xff\x9d\x38\xf1\x55\xd5\x02\x00\x00")

func schemaV1JsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaV1Json,
		"schema/v1.json",
	)
}

func schemaV1Json() (*asset, error) {
	bytes, err := schemaV1JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/v1.json", size: 725, mode: os.FileMode(420), modTime: time.Unix(1500457433, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaVmLxcJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\xcd\x6e\xdb\x3c\x10\xbc\xfb\x29\x0c\x25\xb7\xcf\xfe\x94\x14\xb9\xd4\xb7\xa2\x45\x81\x9e\x5a\x14\x45\x2f\x81\x2a\x50\xd2\x4a\x66\x2a\xfe\x64\x49\xba\x31\x0c\xbd\x7b\x45\x5b\xb6\x28\x89\x4a\x9c\x3a\x0e\x72\x30\x60\xcd\x72\x67\x97\xdc\xd1\x50\x9b\xc9\x74\x1a\x5c\xaa\x74\x09\x8c\x04\x8b\x69\xb0\xd4\x5a\x2e\xc2\xf0\x4e\x09\x3e\xdf\xa1\xff\x0b\x2c\xc2\x0c\x49\xae\xe7\x57\x37\xe1\x0e\xbb\x08\x66\x36\x2f\x03\x95\x22\x95\x9a\x0a\x6e\x73\xbf\x4a\xe0\x3f\x3f\x7d\x9c\x7e\x07\x25\x0c\xa6\x30\xfd\x01\x4c\x96\x44\xc3\x62\xba\x62\x61\xf9\x90\xee\xb2\xf4\x5a\x82\x5d\x2e\x92\x3b\x48\xf5\x0e\x43\xb8\x37\x14\x21\xab\xf1\xdb\xfa\x79\xbf\xaa\xfe\x1b\x6d\xe3\x12\x85\x04\xd4\x14\x54\xbd\x62\xb3\x5b\x11\xa7\x82\x31\xe0\xfa\x80\x38\xdc\x4a\x23\xe5\x45\xb0\x85\xab\xd9\xc4\x8d\x1d\xd6\x02\x37\xec\x50\x6f\x8b\x34\x5d\x36\x40\xd4\xc9\x66\x94\xc7\xab\x54\x1a\x5f\x35\xca\x35\x14\x80\xc1\x6c\x1f\xc8\x20\x27\xa6\xb4\x9d\x5d\x0f\x48\x18\x30\x81\xeb\xb8\x48\x4e\x62\x3a\xbd\x95\x17\x69\x83\x8b\x0c\xe2\x02\x85\x91\xca\xc7\x43\x10\xc9\xba\x65\x31\x9c\xde\x1b\xf8\xa2\x81\xd9\xd5\x1a\x0d\x1c\x42\xb4\x01\xdb\x69\x6c\xfa\xc3\xac\xbc\x73\xb1\xad\x62\x4e\x52\x38\xa6\x81\x7d\x95\x4d\x3b\x73\x8f\x1a\x9b\xc8\x40\x93\x6e\xc6\x01\x88\x9c\x0c\x8f\x4a\xbb\x55\x5c\x6c\xa8\xd6\x59\x37\x3a\xd0\x67\x83\xaf\x40\x2f\x7b\x6b\xb7\x93\xe0\x30\x44\xeb\x17\x50\xaf\x87\xf0\xaa\x24\x7c\x88\x32\x92\xfa\x03\x72\xb9\x56\x41\x07\x8c\x9c\xa7\xca\x5d\x6f\x49\x48\x96\xe1\x73\x37\x2b\x89\xae\xe7\xb8\xb5\x91\x5f\xb7\x57\xf3\xf7\x64\x9e\x7f\x98\x7f\x8e\x36\xef\xaa\xf6\x69\x11\xfd\x77\x19\x8c\x16\xa6\x72\x75\xf3\x2f\x95\x73\x81\x8c\xe8\xad\xea\x6b\x86\x0e\xff\xa4\xff\xaf\xea\x48\xaf\xf6\x8a\x58\x37\x16\xe7\x13\x5f\x4f\x52\xf6\x25\xa2\x9c\x5a\xb7\xec\x69\x30\x21\x8a\x7a\xa9\x1e\xa3\xdb\x1d\xdb\x98\xe2\xfc\xfe\x38\x76\x24\x9d\x70\xd5\x3b\x20\x84\x12\x88\x1a\xca\xf7\x99\x34\x04\xd3\xe5\xe9\x1c\xc5\x70\xa3\x4f\x71\x3c\x3e\xd1\xc3\x74\x18\x79\xf8\xe6\x9e\xe6\x75\x1b\xa1\x7c\x24\x32\x72\xfc\x41\x26\xfe\xf0\x52\x90\xec\x39\xa3\x1c\xb1\x1b\xcb\x46\xeb\x7d\x89\xbe\x6e\xf7\x63\x71\xd0\xe8\xd5\xb5\xd1\xb4\xf6\x36\x14\xb6\x22\x48\xc9\xe9\x7b\x7a\x63\x42\x75\xee\x17\xdb\x59\x49\xb9\x79\xe8\xeb\xea\x12\x21\xb7\xb4\x17\x61\x3b\xf4\xd0\xb5\xa7\xd0\xf1\x9e\xb0\x67\x37\xde\x52\x89\x51\xeb\x44\xbc\x42\xa1\xb4\x56\xa1\x18\xdc\x97\x2f\x5f\x27\x83\xa4\x16\xc7\xf9\xeb\xe4\x90\x09\x24\xe7\xaf\x63\x12\xc3\xb5\x39\x53\x9d\xd1\xeb\x8e\x32\x52\x1c\x75\xd7\x8d\x39\xe3\x88\xf1\x8c\xbe\x18\x9d\x11\x36\xae\x1a\x1b\x2c\x9f\xc8\xef\x18\x61\x7b\xc3\x1b\xa4\x23\x2a\x5c\x42\xfa\x5b\x19\x16\x7b\x3e\xd4\x8e\xea\x6d\x4f\x70\x74\xee\xe0\xfe\xf1\xfa\x7f\x77\xcf\xdd\x0f\xe0\x89\xfd\x55\x93\xbf\x01\x00\x00\xff\xff\xe7\x65\x42\x4c\xc2\x0d\x00\x00")

func schemaVmLxcJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaVmLxcJson,
		"schema/vm/lxc.json",
	)
}

func schemaVmLxcJson() (*asset, error) {
	bytes, err := schemaVmLxcJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/vm/lxc.json", size: 3522, mode: os.FileMode(420), modTime: time.Unix(1496230900, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaVmNullJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x93\x41\x6b\xf3\x30\x0c\x86\xef\xf9\x15\x26\xdf\x77\xd8\x20\x5d\x36\xd8\xa9\xd7\x8d\xc1\x4e\x83\x31\x76\x19\x25\xb8\x8e\x9a\xba\xc4\x96\x2b\xcb\x85\x50\xfa\xdf\x97\xd4\x6d\x9a\x6e\xd9\x2e\xdd\x21\x10\x3f\x7a\xf5\x4a\x89\xe4\x6d\x22\x44\xfa\xdf\xab\x25\x18\x99\x4e\x45\xba\x64\x76\xd3\x3c\x5f\x79\xb4\x93\x48\x6f\x90\xaa\xbc\x24\xb9\xe0\xc9\xed\x7d\x1e\xd9\xbf\x34\xeb\xf2\x4a\xf0\x8a\xb4\x63\x8d\xb6\xcb\x7d\x71\x60\xdf\x1f\x1f\xc4\x2b\x78\x0c\xa4\x40\xbc\x81\x71\xb5\x64\x98\x8a\x8d\xc9\x6d\xa8\x6b\x71\xf5\x84\x24\x18\x3c\x6b\x5b\x09\xb4\x75\x73\x1d\x9d\xb8\x71\xd0\x59\xe0\x7c\x05\x8a\x23\x23\x58\x07\x4d\x50\xb6\xfc\xa3\x3d\x1f\x55\xed\xeb\x6c\x1f\x77\x84\x0e\x88\x35\xf8\x56\xb1\x8d\x8a\x42\xa1\x31\x60\xb9\x27\x03\x6f\xcf\xd4\x56\x4d\xf7\x78\x97\x25\xc3\x58\xaf\x05\x1b\x4c\x5f\x6f\x4f\x0e\x9d\xa7\x07\x32\x3b\x4b\x37\xda\x16\x1b\xe5\xc2\x58\x39\x6d\x19\x2a\xa0\x34\x3b\x06\x4a\x58\xc8\x50\x77\xad\xdd\x7d\x33\x31\x60\x90\x9a\xa2\x9a\x5f\xe4\x74\x79\x2b\x7f\xd2\x86\xc5\x12\x8a\x8a\x30\x38\x3f\xe6\x23\x89\x64\x73\x72\x09\x56\xaf\x03\x3c\x33\x98\x4e\xcd\x14\xa0\x0f\xe9\x03\x3c\x8d\x63\xfb\x75\x9a\xbb\xd1\xb9\x28\x92\x7e\x59\x78\x96\x15\xfc\xb2\x09\xd9\xcf\x53\xb7\x68\xa1\x8f\x8b\x2e\x43\x12\x9f\x03\x74\xc3\xb3\x22\x68\x17\x7d\x48\xda\xcb\xc1\x84\xcd\x10\x11\xcc\x11\xb9\x5f\xa5\x91\x1f\x19\x0b\xc7\x6f\x49\xba\x67\x97\x7c\x06\x00\x00\xff\xff\xaa\xf3\x11\xf0\xa2\x03\x00\x00")

func schemaVmNullJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaVmNullJson,
		"schema/vm/null.json",
	)
}

func schemaVmNullJson() (*asset, error) {
	bytes, err := schemaVmNullJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/vm/null.json", size: 930, mode: os.FileMode(420), modTime: time.Unix(1496230900, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaVmQemuJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x54\x5d\x6f\x9b\x30\x14\x7d\xe7\x57\x20\xaf\x6f\x4b\x96\xae\xea\xcb\xf2\x36\x6d\x9a\xb4\xa7\x49\xd3\xb4\x97\x8a\x21\xc7\x5c\x88\x5b\xfc\x91\x6b\x9b\x28\x8a\xf8\xef\x03\x12\x88\x01\x57\xcb\xda\xbe\xe1\x73\xbf\x8e\x39\xc7\xf7\x18\xc5\x31\xb9\x31\x6c\x0b\x82\x92\x75\x4c\xb6\xd6\xea\xf5\x6a\xf5\x68\x94\x5c\x9e\xd0\x0f\x0a\x8b\x55\x86\x34\xb7\xcb\xdb\xfb\xd5\x09\x7b\x47\x16\x6d\x5d\x06\x86\x21\xd7\x96\x2b\xd9\xd6\xfe\xd0\x20\x7f\x7f\xfd\x12\xff\x04\xa3\x1c\x32\x88\x7f\x81\xd0\x25\xb5\xb0\x8e\x2b\xb1\xda\x81\x70\xa7\x32\x7b\xd0\xd0\xe6\xab\xcd\x23\x30\x7b\xc2\x10\x76\x8e\x23\x64\x0d\xfe\xd0\x9c\xfb\xac\xe6\x33\xe9\xe2\x1a\x95\x06\xb4\x1c\x4c\x93\x71\x3c\x65\xa4\x4c\x09\x01\xd2\x0e\x88\xd7\xdb\x58\xe4\xb2\x20\x1d\x5c\x2f\x22\x3f\x36\xe4\x82\x74\x62\x98\xd7\x21\x3d\xcd\x33\x92\x8c\xca\x05\x97\x69\xc5\xb4\x0b\x8d\xe3\xd2\x42\x01\x48\x16\x7d\x20\x83\x9c\xba\xb2\xa5\xf6\x71\xd6\x44\x80\x50\x78\x48\x8b\xcd\xab\x3a\xbd\x9e\xca\x9b\xd0\x90\x2a\x83\xb4\x40\xe5\xb4\x09\xf5\xa1\x88\xf4\x70\xe9\xe2\x24\xdf\x39\xf8\x6e\x41\xb4\xd9\x16\x1d\x0c\x21\x7e\x06\x2f\x72\x1c\xa7\x6a\xd6\x41\x5d\x5a\xaa\x98\x53\x06\xd7\x10\xe8\xa7\x1c\x2f\xa2\x07\xec\x78\x8e\xcc\x4c\xe9\x57\x0c\x40\xe2\x55\x04\x6c\x3a\x9e\xe2\x63\x73\xbb\x2e\xc6\xd1\x99\x41\xcf\x78\x05\x76\x3b\xc9\xed\x94\x90\x30\x47\x9b\x27\x68\x0f\x73\xb8\x2a\xa9\x9c\xa3\x82\xb2\x70\x40\x6f\x0f\x86\x8c\xc0\xc4\x3b\xd5\x7e\x7e\xdb\x84\x66\x19\xfe\xef\x65\x35\xb5\x8d\x8e\xdd\x22\xf9\xf3\x70\xbb\xfc\x44\x97\xf9\xe7\xe5\xb7\xe4\x78\x57\x5f\x4e\xeb\xe4\xfd\x0d\x79\x76\x30\xd7\xd5\xfd\x4b\x26\xe7\x0a\x05\xb5\x9d\xeb\x9b\x0e\xa3\xfe\xd1\xf4\xab\x1e\x59\xaf\x5d\x16\x29\x17\xb4\x80\x90\xf5\x26\x86\x7a\xce\x1c\xa1\x3d\x16\x62\x1d\x05\x6e\x4d\x32\xb5\x97\xa5\xa2\x59\xea\xb0\xfc\x47\xfd\xe8\x5f\x5d\xee\xec\x90\x87\x5b\x37\x9b\x9e\x3d\x19\x27\xd2\x80\x75\xaf\xe2\xd6\x37\x78\x49\xed\xc0\xef\xea\x1b\x05\x1f\x0b\x41\xba\x9f\xca\xbd\x63\x6a\x7f\xe7\xab\x9c\xcc\x55\x1e\x34\x0b\xae\x80\xf1\x5f\x9f\xb3\x0e\xae\x29\x67\x20\x7d\xaa\x44\xc8\x28\x1b\xa5\x4a\xf0\x9e\x9d\xb7\x6c\x73\x5a\x1a\x88\x7a\x6e\x75\x54\x47\x7f\x03\x00\x00\xff\xff\x0e\xae\x27\x8a\xb2\x07\x00\x00")

func schemaVmQemuJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaVmQemuJson,
		"schema/vm/qemu.json",
	)
}

func schemaVmQemuJson() (*asset, error) {
	bytes, err := schemaVmQemuJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/vm/qemu.json", size: 1970, mode: os.FileMode(420), modTime: time.Unix(1500457433, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/none.json": schemaNoneJson,
	"schema/v1.json": schemaV1Json,
	"schema/vm/lxc.json": schemaVmLxcJson,
	"schema/vm/null.json": schemaVmNullJson,
	"schema/vm/qemu.json": schemaVmQemuJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"none.json": &bintree{schemaNoneJson, map[string]*bintree{}},
		"v1.json": &bintree{schemaV1Json, map[string]*bintree{}},
		"vm": &bintree{nil, map[string]*bintree{
			"lxc.json": &bintree{schemaVmLxcJson, map[string]*bintree{}},
			"null.json": &bintree{schemaVmNullJson, map[string]*bintree{}},
			"qemu.json": &bintree{schemaVmQemuJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
